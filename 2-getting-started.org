* Getting Started
Following the Python tutorial I will try to achieve the same. But at this point
I will have to start a folder structure for my examples.

** Create a directory
Let's create a simple project and call it simple-example and cd into it.
#+BEGIN_EXAMPLE
stack new simple-example simple
cd ./simple-example
#+END_EXAMPLE

** cabal file
Edit ~sinple-example.cabal~ file and modify ~build-depends~ section to look
like this:
#+BEGIN_EXAMPLE
  build-depends:       base >= 4.7 && < 5
                     , gi-gtk >= 3.0
                     , haskell-gi-base -any
#+END_EXAMPLE

** Source file - Simple Example
Edit ./src/Main.hs and make it look like following:
#+BEGIN_SRC haskell
  {-# LANGUAGE OverloadedStrings #-}

  module Main where

  import qualified GI.Gtk as GI (init,
                                 main)
  import GI.Gtk (mainQuit,
                 onWidgetDestroy,
                 windowNew,
                 widgetShowAll)
  import GI.Gtk.Enums
         (WindowType(..))

  main :: IO ()
  main = do
    _ <- GI.init Nothing

    win <- windowNew WindowTypeToplevel
    _ <- onWidgetDestroy win mainQuit
    widgetShowAll win
    GI.main

#+END_SRC

** Compile and run
When you run you OS version of ~stack install~ for the first time, it will take
long time to complete. It's over 20 minutes on my machine. It is quick after that.

*** Linux version
#+BEGIN_EXAMPLE
stack install
stack exec simple-example
#+END_EXAMPLE

*** Windows version
#+BEGIN_EXAMPLE
stack install --system-ghc
simple-example.exe
#+END_EXAMPLE

** Translation of Gtk symbols
When Python example contains something like ~show_all~, then on the Haskell side
you need to look for something like showAll.

Go to the documentation
https://hackage.haskell.org/package/gi-gtk-3.0.18/docs/doc-index-All.html
and search all index.

Among other potential candidates ~widgetShowAll~ is found. The method operates
on a widget so it makes sense. Clicking on the link
to the right of it will reveal more information.

I had to replace Python's 'delete-event' with onWidgetDestroy, because it's type
better suited my needs. But it you want [[https://hackage.haskell.org/package/gi-gtk-3.0.18/docs/GI-Gtk-Objects-Widget.html#v:onWidgetDeleteEvent][onWidgetDeleteEvent]] is also available.

This page https://github.com/haskell-gi/gi-gtk-examples has more examples of
GI.Gtk haskell code.

** Emacs tips
*** imported functions
When you edit the code in Emacs, the editor will suggest to add imports when you
type the function names in the source.

*** Searching for functions in REPL
When you start ~stack repl~ in Emacs eshell you will get auto completion. Typing
'GI.Gtk.co' will show prompt with possible completions down-cased. When you
select one possibility you will get a correct camel-cased version.
#+BEGIN_EXAMPLE
*Main> GI.Gtk.containeradd

<interactive>:1:1: error:
    Not in scope: ‘GI.Gtk.containeradd’
    Perhaps you meant ‘GI.Gtk.containerAdd’ (imported from GI.Gtk)
    No module named ‘GI.Gtk’ is imported.
*Main> GI.Gtk.co
#+END_EXAMPLE

When you import GI.Gtk in REPL like this:
#+BEGIN_EXAMPLE
import GI.Gtk
#+END_EXAMPLE

You can search without the prefix.
#+BEGIN_EXAMPLE
*Main GI.Gtk> containeradd

<interactive>:4:1: error:
    • Variable not in scope: containeradd
    • Perhaps you meant ‘containerAdd’ (imported from GI.Gtk)
*Main GI.Gtk>
#+END_EXAMPLE

** Source file - Extended Example
After learning how to Translate Gtk symbols and use auto-completion in Emacs
let's edit the Main.hs file of your simple example to look like this:
#+BEGIN_SRC haskell
  {-# LANGUAGE OverloadedStrings #-}

  module Main where

  import qualified GI.Gtk as GI (init,
                                 main)
  import GI.Gtk (buttonNew,
                 containerAdd,
                 mainQuit,
                 onButtonClicked,
                 onWidgetDestroy,
                 setButtonLabel,
                 windowNew,
                 windowSetTitle,
                 widgetShowAll)
  import GI.Gtk.Enums
         (WindowType(..))

  main :: IO ()
  main = do
    _ <- GI.init Nothing

    win <- windowNew WindowTypeToplevel
    windowSetTitle win "Hello World"
    _ <- onWidgetDestroy win mainQuit

    btn <- buttonNew
    setButtonLabel btn "Click here"
    _ <- onButtonClicked btn (putStrLn "Button clicked")

    containerAdd win btn
    widgetShowAll win
    GI.main
#+END_SRC

When you compile and run it, you will see a Window with a button.
