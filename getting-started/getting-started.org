* Getting Started

Following the Python tutorial I will try to achieve the same. But at this point
I will have to start a folder structure for my examples.

Also I need to try creation of a separate project

[[https://wiki.haskell.org/How_to_write_a_Haskell_program][How to write a Haskell program]] has a section called Structure of a simple
project. We will adapt it to our needs and do it in slightly different order.

** Create a directory
Create a directory and move into it.
#+BEGIN_EXAMPLE
mkdir simple-example
cd simple-example/
#+END_EXAMPLE

** Add a build system
Run the command below. It will start asking you questions. Press Enter to choose
the default value for most the questions, except one question near the end.

#+BEGIN_EXAMPLE
cabal init
#+END_EXAMPLE

The question where you have to enter 2.
#+BEGIN_EXAMPLE
What does the package build:
   1) Library
   2) Executable
Your choice? 2
#+END_EXAMPLE

List the directory and you will see that cabal init has creates some files for
you.
#+BEGIN_EXAMPLE
$ ls
ChangeLog.md  LICENSE  Main.hs  Setup.hs  simple-example.cabal
#+END_EXAMPLE

** View generated code

*** Haskell source
Run your editor. I have used emacsclient, but you can use any editor you want.
#+BEGIN_EXAMPLE
$ emacsclient ./Main.hs &
#+END_EXAMPLE

Initially you will see some code created by cabal init.
#+BEGIN_SRC haskell
  module Main where

  main :: IO ()
  main = putStrLn "Hello, Haskell!"
#+END_SRC

*** cabal file

Run you editor to edit the cabal file.
#+BEGIN_EXAMPLE
$ emacsclient ./simple-example.cabal
#+END_EXAMPLE

You will see something like this, with exception of hidden author details.
#+BEGIN_EXAMPLE
-- Initial simple-example.cabal generated by cabal init.  For further
-- documentation, see http://haskell.org/cabal/users-guide/

name:                simple-example
version:             0.1.0.0
-- synopsis:
-- description:
license:             BSD3
license-file:        LICENSE
author:              ***** *********
maintainer:          ***********@**********.com
-- copyright:
-- category:
build-type:          Simple
extra-source-files:  ChangeLog.md
cabal-version:       >=1.10

executable simple-example
  main-is:             Main.hs
  -- other-modules:
  -- other-extensions:
  build-depends:       base >=4.9 && <4.10
  -- hs-source-dirs:
  default-language:    Haskell2010
#+END_EXAMPLE

** Edit the code

*** cabal file
Change the build-depends section of the cabal file to look like this.
#+BEGIN_EXAMPLE
  build-depends:       base >=4.9 && <4.10
                     , gi-gtk -any
                     , haskell-gi-base -any
#+END_EXAMPLE

*** Haskell source
Edit the Main.hs file to look like this. Explanation will follow.
#+BEGIN_EXAMPLE haskell
  {-# LANGUAGE OverloadedStrings, OverloadedLabels #-}

  module Main where

  import qualified GI.Gtk as Gtk
  import Data.GI.Base

  main :: IO ()
  main = do
    Gtk.init Nothing

    win <- new Gtk.Window [ #title := "Hi there" ]
    on win #destroy Gtk.mainQuit
    #showAll win
    Gtk.main

#+END_EXAMPLE

** Run it
Run the following and you will see the window. Close it and have some well
deserved rest.
#+BEGIN_EXAMPLE
cabal run simple-example
#+END_EXAMPLE
