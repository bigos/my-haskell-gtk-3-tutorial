* Layout Containers
** Boxes
*** Create a project and edit the cabal file.
Do you remember how we have created a project in [[file:2-getting-started.org][Getting Started]], in the section
*Create a project*? Similarly, create a simple project, call it layout-box and cd
into it.
#+BEGIN_EXAMPLE
stack new layout-box simple
cd layout-box/
#+END_EXAMPLE

Next edit the cabal file and make sure we have the required dependencies added
the same way as we did in [[file:2-getting-started.org][Getting Started]] in the section *cabal file*.
*** Edit the source
Edit ~./src/Main.hs~ and make it look as follows:
#+BEGIN_SRC haskell
  {-# LANGUAGE OverloadedStrings #-}

  module Main where

  import qualified GI.Gtk as GI (init,
                                 main)
  import GI.Gtk (buttonNew,
                 boxNew,
                 containerAdd,
                 boxPackStart,
                 mainQuit,
                 onButtonClicked,
                 onWidgetDestroy,
                 setButtonLabel,
                 windowNew,
                 windowSetTitle,
                 widgetShowAll)
  import GI.Gtk.Enums
         (WindowType(..), Orientation(..))

  main :: IO ()
  main = do
    _ <- GI.init Nothing

    win <- windowNew WindowTypeToplevel
    windowSetTitle win "Hello World"

    box <- boxNew OrientationHorizontal 10

    btn1 <- buttonNew
    setButtonLabel btn1 "Hello"
    _ <- onButtonClicked btn1 (putStrLn "Hello")
    boxPackStart box btn1 True True 0

    btn2 <- buttonNew
    setButtonLabel btn2 "Goodbye"
    _ <- onButtonClicked btn2 (putStrLn "Goodbye")
    boxPackStart box btn2 True True 0

    containerAdd win box

    _ <- onWidgetDestroy win mainQuit
    widgetShowAll win
    GI.main
#+END_SRC
*** Compile and run.
Compile the same way as you did in [[file:2-getting-started.org][Getting Started]] section *Compile and run*.

The command used to run your executable will be different because compilation step has
created an executable with the different name. It is not ~simple-example~, you
can find name of the executable at the bottom of the compilation output.
Depending on your OS it will be either ~stack exec layout-box~ or ~layout-box.exe~.

** Grid

*** Create a project and edit the cabal file
Following the usual procedure crate new project ~grid-example~, cd into it and
edit the cabal file.

*** Edit the source
#+BEGIN_SRC haskell
  {-# LANGUAGE OverloadedStrings #-}

  module Main where

  import qualified GI.Gtk as GI (init,
                                 main)
  import GI.Gtk (buttonNew,
                 containerAdd,
                 gridAttach,
                 gridAttachNextTo,
                 mainQuit,
                 onWidgetDestroy,
                 setButtonLabel,
                 widgetShowAll,
                 windowNew,
                 windowSetTitle,
                 gridNew)

  import GI.Gtk.Enums
         (WindowType(..), PositionType(..))

  main :: IO ()
  main = do
    _ <- GI.init Nothing

    win <- windowNew WindowTypeToplevel
    windowSetTitle win "Grid example"

    grid <- gridNew
    containerAdd win grid

    button1 <- buttonNew
    setButtonLabel button1 "Button 1"

    button2 <- buttonNew
    setButtonLabel button2 "Button 2"

    button3 <- buttonNew
    setButtonLabel button3 "Button 3"

    button4 <- buttonNew
    setButtonLabel button4 "Button 4"

    button5 <- buttonNew
    setButtonLabel button5 "Button 5"

    button6 <- buttonNew
    setButtonLabel button6 "Button 6"

    containerAdd grid button1
    gridAttach grid button2 1 0 2 1
    gridAttachNextTo grid button3 (Just button1) PositionTypeBottom 1 2
    gridAttachNextTo grid button4 (Just button3) PositionTypeRight 2 1
    gridAttach grid button5 1 2 1 1
    gridAttachNextTo grid button6 (Just button5) PositionTypeRight 1 1

    _ <- onWidgetDestroy win mainQuit
    widgetShowAll win
    GI.main
#+END_SRC

*** Compile and run
Compile and run ~grid-example~ the same way you did in previous examples.
** ListBox
This is an incomplete version of the Python example. I simply do not understand
Haskell well enough to go into nuances of handling the event results.
*** Create a project and edit the cabal file
Following the usual procedure crate new project ~list-box-demo~, cd into it and
edit the cabal file.
*** Edit the source
#+BEGIN_SRC haskell
  {-# LANGUAGE OverloadedStrings #-}
  module Main where

  import qualified GI.Gtk as GI (init,
                                 main)
  import GI.Gtk (boxNew,
                 boxPackStart,
                 checkButtonNew,
                 comboBoxTextInsert,
                 comboBoxTextNew,
                 containerAdd,
                 containerSetBorderWidth,
                 labelNew,
                 labelSetXalign,
                 listBoxInsert,
                 listBoxNew,
                 listBoxRowGetIndex,
                 listBoxRowNew,
                 listBoxSetSelectionMode,
                 mainQuit,
                 onListBoxRowSelected,
                 onWidgetDestroy,
                 setWidgetValign,
                 switchNew,
                 widgetShowAll,
                 windowNew,
                 windowSetTitle)

  import GI.Gtk.Enums (Align(..),
                       Orientation(..),
                       SelectionMode(..),
                       WindowType(..))

  listBoxAddLabel lb txt = do
    lbr <- listBoxRowNew
    dat <- labelNew (Just txt)
    containerAdd lbr dat
    listBoxInsert lb lbr (-1)

  main :: IO ()
  main = do
    _ <- GI.init Nothing

    win <- windowNew WindowTypeToplevel
    windowSetTitle win "ListBox Demo"
    containerSetBorderWidth win 10

    boxOuter <- boxNew OrientationVertical 6
    containerAdd win boxOuter

    listBox <- listBoxNew
    listBoxSetSelectionMode listBox SelectionModeNone
    boxPackStart boxOuter listBox True True 0

    row <- listBoxRowNew
    hbox <- boxNew OrientationHorizontal 50
    containerAdd row hbox
    vbox <-boxNew OrientationVertical 0
    boxPackStart hbox vbox True True 0

    label1 <- labelNew (Just "Automatic Date & Time")
    labelSetXalign label1 0
    label2 <- labelNew (Just "Requires internet access")
    labelSetXalign label2 0
    boxPackStart vbox label1 True True 0
    boxPackStart vbox label2 True True 0

    switch <- switchNew
    setWidgetValign switch AlignCenter
    boxPackStart hbox switch False True 0

    containerAdd listBox row

    row <- listBoxRowNew
    hbox <- boxNew OrientationHorizontal 50
    containerAdd row hbox
    label <- labelNew (Just "Enable Automatic Update")
    labelSetXalign label 0
    check <- checkButtonNew
    boxPackStart hbox label True True 0
    boxPackStart hbox check False True 0

    containerAdd listBox row

    row <- listBoxRowNew
    hbox <- boxNew OrientationHorizontal 50
    containerAdd row hbox
    label <- labelNew (Just "Date Format")
    labelSetXalign label 0
    combo <- comboBoxTextNew
    comboBoxTextInsert combo 0 (Just"0") "24-hour"
    comboBoxTextInsert combo 1 (Just "1") "AM/PM"
    boxPackStart hbox label True True 0
    boxPackStart hbox combo False True 0

    containerAdd listBox row

    listbox2 <- listBoxNew

    mapM_ (\x  -> listBoxAddLabel listbox2 x ) ["This"," is"," a"," sorted"," ListBox"," Fail"]

    _ <- onListBoxRowSelected listbox2 (\(Just r) -> listBoxRowGetIndex r >>= print)

    boxPackStart boxOuter listbox2 True True 0

    _ <- onWidgetDestroy win mainQuit
    widgetShowAll win
    GI.main

#+END_SRC
*** Compile and run
Compile and run ~list-box-demo~ the same way you did in previous examples.
TODO
** Stack and StackSwither
TODO
** HeaderBar
TODO
** FlowBox
TODO
** Notebook
TODO
